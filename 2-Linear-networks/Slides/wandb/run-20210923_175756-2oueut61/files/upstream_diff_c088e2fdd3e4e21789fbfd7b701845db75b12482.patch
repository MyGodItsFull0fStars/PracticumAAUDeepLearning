diff --git a/1-Preliminaries/Slides/.ipynb_checkpoints/2-preliminaries-checkpoint.ipynb b/1-Preliminaries/Slides/.ipynb_checkpoints/2-preliminaries-checkpoint.ipynb
new file mode 100644
index 0000000..c87714b
--- /dev/null
+++ b/1-Preliminaries/Slides/.ipynb_checkpoints/2-preliminaries-checkpoint.ipynb
@@ -0,0 +1,162 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "id": "af98e256",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "source": [
+    "# Preliminaries"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "f0e00328",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is a Jupyter Notebook?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "62b5b848",
+   "metadata": {},
+   "source": [
+    "* A document containing at the same time Python code and Rich Text Element\n",
+    "* Allows to clearly describe your code\n",
+    "* The notebook is run by a server (can be local or online)\n",
+    "* You write the code in your browser"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "id": "772e3f24",
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "In fact, these slides are made with Jupyter\n"
+     ]
+    }
+   ],
+   "source": [
+    "print('In fact, these slides are made with Jupyter')"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "5b6de29f",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## How to use Colab?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "826ad3bc",
+   "metadata": {},
+   "source": [
+    "* **Requirement**: Have a Google account\n",
+    "* Go to [https://colab.research.google.com/](https://colab.research.google.com/)\n",
+    "* You can import or create a new notebook there\n",
+    "* The code will be run on Google’s servers"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a7d11a52",
+   "metadata": {},
+   "source": [
+    "Advantages:\n",
+    "* Everything is already set-up\n",
+    "* You don’t need to buy an expensive GPU"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a4aa3aeb",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is Kaggle?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "dad9af81",
+   "metadata": {},
+   "source": [
+    "* It’s a data science competition platform\n",
+    "* Kaggle provides datasets for data scientist to compete to\n",
+    "* Solution are ranked among all the participants\n",
+    "* There are competitions with cash prize\n",
+    "* We will solve some Kaggle’s problems"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c907ce73",
+   "metadata": {},
+   "source": [
+    "**Goal: Being able to solve real problem**"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "34464ebb",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is W&B?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "2b995309",
+   "metadata": {},
+   "source": []
+  }
+ ],
+ "metadata": {
+  "celltoolbar": "Slideshow",
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.8.5"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
diff --git a/1-Preliminaries/Slides/1-introduction.ipynb b/1-Preliminaries/Slides/1-introduction.ipynb
index 57b3d46..affdbc7 100644
--- a/1-Preliminaries/Slides/1-introduction.ipynb
+++ b/1-Preliminaries/Slides/1-introduction.ipynb
@@ -122,7 +122,7 @@
    "source": [
     "* Homework as a form of program to complete\n",
     "* Usually, a **Kaggle** competition\n",
-    "* You must send me your solution and the link to your WandB project page\n",
+    "* You must send me your solution and the link to your **W&B** project page\n",
     "* One student will be selected (**voluntary or not**) to present his solution"
    ]
   },
diff --git a/1-Preliminaries/Slides/2-preliminaries.ipynb b/1-Preliminaries/Slides/2-preliminaries.ipynb
index c3ea930..10b687b 100644
--- a/1-Preliminaries/Slides/2-preliminaries.ipynb
+++ b/1-Preliminaries/Slides/2-preliminaries.ipynb
@@ -115,8 +115,61 @@
    "id": "c907ce73",
    "metadata": {},
    "source": [
-    "**Goal: You will build a small portfolio**"
+    "**Goal: Being able to solve real problem**"
    ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "866e11f1",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is Weights & Biases?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "e2a7957d",
+   "metadata": {},
+   "source": [
+    "* Allows to track experiments and share them with other DL practionners\n",
+    "* Embded hyper parameter tuning\n",
+    "* Save models and datasets\n",
+    "* Generate reports about experiments"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "8687bc28",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## What is PyTorch?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "dbd45cb0",
+   "metadata": {},
+   "source": [
+    "* Open source deep learning framework\n",
+    "* Supported by Facebook\n",
+    "* Fast numerical operation + automatic gradient computation with GPU support"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "cfe852b5",
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
diff --git a/1-Preliminaries/Slides/3-ndarray.ipynb b/1-Preliminaries/Slides/3-ndarray.ipynb
index 970656c..ebba170 100644
--- a/1-Preliminaries/Slides/3-ndarray.ipynb
+++ b/1-Preliminaries/Slides/3-ndarray.ipynb
@@ -26,7 +26,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 1,
    "metadata": {
     "origin_pos": 5,
     "tab": [
@@ -54,7 +54,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 2,
    "metadata": {
     "origin_pos": 12,
     "tab": [
@@ -68,7 +68,7 @@
        "tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])"
       ]
      },
-     "execution_count": 3,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -80,7 +80,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 3,
    "metadata": {
     "origin_pos": 18,
     "tab": [
@@ -94,7 +94,7 @@
        "12"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -116,7 +116,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 4,
    "metadata": {
     "origin_pos": 21,
     "tab": [
@@ -130,7 +130,7 @@
        "torch.Size([12])"
       ]
      },
-     "execution_count": 5,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -153,7 +153,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 5,
    "metadata": {
     "origin_pos": 23,
     "tab": [
@@ -169,7 +169,7 @@
        "        [ 8.,  9., 10., 11.]])"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -188,7 +188,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 6,
    "metadata": {},
    "outputs": [
     {
@@ -201,7 +201,7 @@
        "        [[ 8.,  9., 10., 11.]]])"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -225,7 +225,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 7,
    "metadata": {
     "origin_pos": 27,
     "tab": [
@@ -245,7 +245,7 @@
        "         [0., 0., 0., 0.]]])"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -256,7 +256,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 8,
    "metadata": {
     "origin_pos": 31,
     "tab": [
@@ -276,7 +276,7 @@
        "         [1., 1., 1., 1.]]])"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -298,7 +298,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 9,
    "metadata": {
     "origin_pos": 35,
     "tab": [
@@ -309,12 +309,12 @@
     {
      "data": {
       "text/plain": [
-       "tensor([[-0.0607, -0.2799,  0.8752,  0.1033],\n",
-       "        [ 0.2817,  0.1044, -0.8311, -0.0886],\n",
-       "        [ 0.6567,  0.0300,  0.4028,  0.6749]])"
+       "tensor([[-0.2592,  0.1826, -1.3482, -0.6827],\n",
+       "        [-1.1256,  0.0465,  1.1195,  1.2121],\n",
+       "        [ 0.3441,  0.3188, -1.2741,  0.2008]])"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -336,7 +336,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 10,
    "metadata": {
     "origin_pos": 39,
     "tab": [
@@ -362,7 +362,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 11,
    "metadata": {
     "origin_pos": 42,
     "tab": [
@@ -378,7 +378,7 @@
        "         [4, 3, 2, 1]]))"
       ]
      },
-     "execution_count": 26,
+     "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -400,7 +400,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 12,
    "metadata": {
     "origin_pos": 45,
     "tab": [
@@ -416,7 +416,7 @@
        "        [ 4,  3,  2,  1]])"
       ]
      },
-     "execution_count": 27,
+     "execution_count": 12,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -441,14 +441,27 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 13,
    "metadata": {
     "origin_pos": 48,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[12, 12, 12, 12],\n",
+       "        [12, 12, 12, 12],\n",
+       "        [ 4,  3,  2,  1]])"
+      ]
+     },
+     "execution_count": 13,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "Y[0:2, :] = 12\n",
     "Y"
@@ -456,28 +469,55 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "metadata": {
     "origin_pos": 52,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([1.0000e+00, 2.7183e+00, 7.3891e+00, 2.0086e+01, 5.4598e+01, 1.4841e+02,\n",
+       "        4.0343e+02, 1.0966e+03, 2.9810e+03, 8.1031e+03, 2.2026e+04, 5.9874e+04])"
+      ]
+     },
+     "execution_count": 14,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "torch.exp(x)"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 15,
    "metadata": {
     "origin_pos": 56,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(tensor([ 3.,  4.,  6., 10.]),\n",
+       " tensor([-1.,  0.,  2.,  6.]),\n",
+       " tensor([ 2.,  4.,  8., 16.]),\n",
+       " tensor([0.5000, 1.0000, 2.0000, 4.0000]),\n",
+       " tensor([ 1.,  4., 16., 64.]))"
+      ]
+     },
+     "execution_count": 15,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "x = torch.tensor([1.0, 2, 4, 8])\n",
     "y = torch.tensor([2, 2, 2, 2])\n",
@@ -497,14 +537,33 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 16,
    "metadata": {
     "origin_pos": 60,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(tensor([[ 0.,  1.,  2.,  3.],\n",
+       "         [ 4.,  5.,  6.,  7.],\n",
+       "         [ 8.,  9., 10., 11.],\n",
+       "         [ 2.,  1.,  4.,  3.],\n",
+       "         [ 1.,  2.,  3.,  4.],\n",
+       "         [ 4.,  3.,  2.,  1.]]),\n",
+       " tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],\n",
+       "         [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],\n",
+       "         [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))"
+      ]
+     },
+     "execution_count": 16,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "X = torch.arange(12, dtype=torch.float32).reshape((3, 4))\n",
     "Y = torch.tensor([[2.0, 1, 4, 3], [1, 2, 3, 4], [4, 3, 2, 1]])\n",
@@ -524,14 +583,27 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 17,
    "metadata": {
     "origin_pos": 63,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[False,  True, False,  True],\n",
+       "        [False, False, False, False],\n",
+       "        [False, False, False, False]])"
+      ]
+     },
+     "execution_count": 17,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "X == Y"
    ]
@@ -549,14 +621,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 18,
    "metadata": {
     "origin_pos": 65,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor(66.)"
+      ]
+     },
+     "execution_count": 18,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "X.sum()"
    ]
@@ -575,14 +658,28 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 19,
    "metadata": {
     "origin_pos": 69,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(tensor([[0],\n",
+       "         [1],\n",
+       "         [2]]),\n",
+       " tensor([[0, 1]]))"
+      ]
+     },
+     "execution_count": 19,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "a = torch.arange(3).reshape((3, 1))\n",
     "b = torch.arange(2).reshape((1, 2))\n",
@@ -601,14 +698,27 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 20,
    "metadata": {
     "origin_pos": 72,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "tensor([[0, 1],\n",
+       "        [1, 2],\n",
+       "        [2, 3]])"
+      ]
+     },
+     "execution_count": 20,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "a + b"
    ]
@@ -627,14 +737,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 21,
    "metadata": {
     "origin_pos": 74,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "False"
+      ]
+     },
+     "execution_count": 21,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "before = id(Y)\n",
     "Y = Y + X\n",
@@ -654,14 +775,23 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 22,
    "metadata": {
     "origin_pos": 79,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "id(Z): 140680090863488\n",
+      "id(Z): 140680090863488\n"
+     ]
+    }
+   ],
    "source": [
     "Z = torch.zeros_like(Y)\n",
     "print('id(Z):', id(Z))\n",
@@ -684,14 +814,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 23,
    "metadata": {
     "origin_pos": 83,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "True"
+      ]
+     },
+     "execution_count": 23,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "before = id(X)\n",
     "X += Y\n",
@@ -711,14 +852,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 24,
    "metadata": {
     "origin_pos": 89,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(numpy.ndarray, torch.Tensor)"
+      ]
+     },
+     "execution_count": 24,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "A = X.numpy()\n",
     "B = torch.from_numpy(A)\n",
@@ -738,14 +890,25 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 25,
    "metadata": {
     "origin_pos": 93,
     "tab": [
      "pytorch"
     ]
    },
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "(tensor([3.5000]), 3.5, 3.5, 3)"
+      ]
+     },
+     "execution_count": 25,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
     "a = torch.tensor([3.5])\n",
     "a, a.item(), float(a), int(a)"
@@ -774,7 +937,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/1-Preliminaries/Slides/4-pandas.ipynb b/1-Preliminaries/Slides/4-pandas.ipynb
index 4d60c78..2cf73b6 100644
--- a/1-Preliminaries/Slides/4-pandas.ipynb
+++ b/1-Preliminaries/Slides/4-pandas.ipynb
@@ -199,7 +199,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/1-Preliminaries/Slides/5-linear-algebra.ipynb b/1-Preliminaries/Slides/5-linear-algebra.ipynb
index 081ef8b..22bfa08 100644
--- a/1-Preliminaries/Slides/5-linear-algebra.ipynb
+++ b/1-Preliminaries/Slides/5-linear-algebra.ipynb
@@ -16,7 +16,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 1,
    "metadata": {
     "origin_pos": 2,
     "tab": [
@@ -30,7 +30,7 @@
        "(tensor(5.), tensor(6.), tensor(1.5000), tensor(9.))"
       ]
      },
-     "execution_count": 2,
+     "execution_count": 1,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -62,7 +62,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 2,
    "metadata": {
     "origin_pos": 6,
     "tab": [
@@ -76,7 +76,7 @@
        "tensor([0, 1, 2])"
       ]
      },
-     "execution_count": 3,
+     "execution_count": 2,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -99,7 +99,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 3,
    "metadata": {
     "origin_pos": 10,
     "tab": [
@@ -113,7 +113,7 @@
        "tensor(2)"
       ]
      },
-     "execution_count": 4,
+     "execution_count": 3,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -135,7 +135,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 4,
    "metadata": {
     "origin_pos": 14,
     "tab": [
@@ -149,7 +149,7 @@
        "3"
       ]
      },
-     "execution_count": 5,
+     "execution_count": 4,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -174,7 +174,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 5,
    "metadata": {
     "origin_pos": 18,
     "tab": [
@@ -188,7 +188,7 @@
        "torch.Size([3])"
       ]
      },
-     "execution_count": 6,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -211,7 +211,6 @@
     "where each element $a_{ij}$ belongs to the $i^{\\mathrm{th}}$ row and $j^{\\mathrm{th}}$ column:\n",
     "\n",
     "$$\\mathbf{A}=\\begin{bmatrix} a_{11} & a_{12} & \\cdots & a_{1n} \\\\ a_{21} & a_{22} & \\cdots & a_{2n} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{m1} & a_{m2} & \\cdots & a_{mn} \\\\ \\end{bmatrix}.$$\n",
-    ":eqlabel:`eq_matrix_def`\n",
     "\n",
     "We can convert any appropriately size $m \\times n$ tensor \n",
     "into an $m \\times n$ matrix"
@@ -219,7 +218,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 6,
    "metadata": {
     "origin_pos": 22,
     "tab": [
@@ -235,7 +234,7 @@
        "        [4, 5]])"
       ]
      },
-     "execution_count": 7,
+     "execution_count": 6,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -258,7 +257,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 8,
+   "execution_count": 7,
    "metadata": {
     "origin_pos": 26,
     "tab": [
@@ -273,7 +272,7 @@
        "        [1, 3, 5]])"
       ]
      },
-     "execution_count": 8,
+     "execution_count": 7,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -297,7 +296,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 8,
    "metadata": {
     "origin_pos": 30,
     "tab": [
@@ -313,7 +312,7 @@
        "        [True, True, True]])"
       ]
      },
-     "execution_count": 9,
+     "execution_count": 8,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -338,7 +337,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 9,
    "metadata": {
     "origin_pos": 34,
     "tab": [
@@ -358,7 +357,7 @@
        "         [20, 21, 22, 23]]])"
       ]
      },
-     "execution_count": 10,
+     "execution_count": 9,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -369,7 +368,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 11,
+   "execution_count": 10,
    "metadata": {
     "origin_pos": 38,
     "tab": [
@@ -386,7 +385,7 @@
        "         [ 6.,  8., 10.]]))"
       ]
      },
-     "execution_count": 11,
+     "execution_count": 10,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -411,7 +410,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 11,
    "metadata": {
     "origin_pos": 42,
     "tab": [
@@ -426,7 +425,7 @@
        "        [ 9., 16., 25.]])"
       ]
      },
-     "execution_count": 12,
+     "execution_count": 11,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -448,7 +447,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 12,
    "metadata": {
     "origin_pos": 46,
     "tab": [
@@ -469,7 +468,7 @@
        " torch.Size([2, 3, 4]))"
       ]
      },
-     "execution_count": 13,
+     "execution_count": 12,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -493,7 +492,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 14,
+   "execution_count": 13,
    "metadata": {
     "origin_pos": 50,
     "tab": [
@@ -507,7 +506,7 @@
        "(tensor([0., 1., 2.]), tensor(3.))"
       ]
      },
-     "execution_count": 14,
+     "execution_count": 13,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -530,7 +529,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 14,
    "metadata": {
     "origin_pos": 54,
     "tab": [
@@ -544,7 +543,7 @@
        "(torch.Size([2, 3]), tensor(15.))"
       ]
      },
-     "execution_count": 15,
+     "execution_count": 14,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -567,7 +566,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 16,
+   "execution_count": 15,
    "metadata": {
     "origin_pos": 58,
     "tab": [
@@ -581,7 +580,7 @@
        "(torch.Size([2, 3]), torch.Size([3]))"
       ]
      },
-     "execution_count": 16,
+     "execution_count": 15,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -592,7 +591,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 17,
+   "execution_count": 16,
    "metadata": {
     "origin_pos": 62,
     "tab": [
@@ -606,7 +605,7 @@
        "(torch.Size([2, 3]), torch.Size([2]))"
       ]
      },
-     "execution_count": 17,
+     "execution_count": 16,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -617,7 +616,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 18,
+   "execution_count": 17,
    "metadata": {
     "origin_pos": 66,
     "tab": [
@@ -631,7 +630,7 @@
        "tensor(True)"
       ]
      },
-     "execution_count": 18,
+     "execution_count": 17,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -653,7 +652,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 19,
+   "execution_count": 18,
    "metadata": {
     "origin_pos": 70,
     "tab": [
@@ -667,7 +666,7 @@
        "(tensor(2.5000), tensor(2.5000))"
       ]
      },
-     "execution_count": 19,
+     "execution_count": 18,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -678,7 +677,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 20,
+   "execution_count": 19,
    "metadata": {
     "origin_pos": 74,
     "tab": [
@@ -692,7 +691,7 @@
        "(tensor([1.5000, 2.5000, 3.5000]), tensor([1.5000, 2.5000, 3.5000]))"
       ]
      },
-     "execution_count": 20,
+     "execution_count": 19,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -714,7 +713,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 21,
+   "execution_count": 20,
    "metadata": {
     "origin_pos": 78,
     "tab": [
@@ -730,7 +729,7 @@
        " torch.Size([2, 1]))"
       ]
      },
-     "execution_count": 21,
+     "execution_count": 20,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -753,7 +752,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 22,
+   "execution_count": 21,
    "metadata": {
     "origin_pos": 82,
     "tab": [
@@ -768,7 +767,7 @@
        "        [0.2500, 0.3333, 0.4167]])"
       ]
      },
-     "execution_count": 22,
+     "execution_count": 21,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -790,7 +789,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 23,
+   "execution_count": 22,
    "metadata": {
     "origin_pos": 86,
     "tab": [
@@ -805,7 +804,7 @@
        "        [3., 5., 7.]])"
       ]
      },
-     "execution_count": 23,
+     "execution_count": 22,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -827,7 +826,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 24,
+   "execution_count": 23,
    "metadata": {
     "origin_pos": 90,
     "tab": [
@@ -841,7 +840,7 @@
        "(tensor([0., 1., 2.]), tensor([1., 1., 1.]), tensor(3.))"
       ]
      },
-     "execution_count": 24,
+     "execution_count": 23,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -865,7 +864,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 25,
+   "execution_count": 24,
    "metadata": {
     "origin_pos": 94,
     "tab": [
@@ -879,7 +878,7 @@
        "tensor(3.)"
       ]
      },
-     "execution_count": 25,
+     "execution_count": 24,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -920,7 +919,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 26,
+   "execution_count": 25,
    "metadata": {
     "origin_pos": 101,
     "tab": [
@@ -934,7 +933,7 @@
        "(torch.Size([2, 3]), torch.Size([3]), tensor([ 5., 14.]), tensor([ 5., 14.]))"
       ]
      },
-     "execution_count": 26,
+     "execution_count": 25,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -977,7 +976,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 27,
+   "execution_count": 26,
    "metadata": {
     "origin_pos": 105,
     "tab": [
@@ -994,7 +993,7 @@
        "         [12., 12., 12., 12.]]))"
       ]
      },
-     "execution_count": 27,
+     "execution_count": 26,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1026,7 +1025,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 28,
+   "execution_count": 27,
    "metadata": {
     "origin_pos": 109,
     "tab": [
@@ -1040,7 +1039,7 @@
        "tensor(5.)"
       ]
      },
-     "execution_count": 28,
+     "execution_count": 27,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1064,7 +1063,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 29,
+   "execution_count": 28,
    "metadata": {
     "origin_pos": 113,
     "tab": [
@@ -1078,7 +1077,7 @@
        "tensor(7.)"
       ]
      },
-     "execution_count": 29,
+     "execution_count": 28,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1102,7 +1101,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 30,
+   "execution_count": 29,
    "metadata": {
     "origin_pos": 117,
     "tab": [
@@ -1116,7 +1115,7 @@
        "tensor(6.)"
       ]
      },
-     "execution_count": 30,
+     "execution_count": 29,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -1148,7 +1147,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/1-Preliminaries/Slides/6-calculus.ipynb b/1-Preliminaries/Slides/6-calculus.ipynb
index 2c9b2e3..7c40e74 100644
--- a/1-Preliminaries/Slides/6-calculus.ipynb
+++ b/1-Preliminaries/Slides/6-calculus.ipynb
@@ -1303,7 +1303,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/1-Preliminaries/Slides/7-autograd.ipynb b/1-Preliminaries/Slides/7-autograd.ipynb
index ad90cdf..c81489d 100644
--- a/1-Preliminaries/Slides/7-autograd.ipynb
+++ b/1-Preliminaries/Slides/7-autograd.ipynb
@@ -505,7 +505,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/2-Linear-networks/Exercise/.ipynb_checkpoints/simple-regression-checkpoint.ipynb b/2-Linear-networks/Exercise/.ipynb_checkpoints/simple-regression-checkpoint.ipynb
new file mode 100644
index 0000000..2f064d1
--- /dev/null
+++ b/2-Linear-networks/Exercise/.ipynb_checkpoints/simple-regression-checkpoint.ipynb
@@ -0,0 +1,298 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "!pip install wandb"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
+    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:21.990824Z",
+     "iopub.status.busy": "2021-07-20T09:27:21.990322Z",
+     "iopub.status.idle": "2021-07-20T09:27:21.998746Z",
+     "shell.execute_reply": "2021-07-20T09:27:21.99754Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:21.990792Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
+    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
+    "# For example, here's several helpful packages to load\n",
+    "\n",
+    "import numpy as np # linear algebra\n",
+    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
+    "import wandb\n",
+    "\n",
+    "# Input data files are available in the read-only \"../input/\" directory\n",
+    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
+    "\n",
+    "import os\n",
+    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
+    "    for filename in filenames:\n",
+    "        print(os.path.join(dirname, filename))\n",
+    "\n",
+    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
+    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "First, we need to import Pytorch"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.001769Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.000817Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.016019Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.01474Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.001726Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "import torch\n",
+    "from torch import nn\n",
+    "from torch import optim\n",
+    "from torch.utils import data\n",
+    "import wandb\n",
+    "wandb.init(project=\"simple_regression\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Data Processing"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.019074Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.018711Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.054046Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.052743Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.01904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "train_data = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\n",
+    "train_data.head()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We need to separate features from target"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.056464Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.056075Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.078596Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.077606Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.05643Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_train = train_data.shape[0]\n",
+    "all_features = train_data.iloc[:, 1:-1]\n",
+    "all_features = all_features.apply(lambda x: (x - x.mean()) / (x.std()))\n",
+    "train_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)\n",
+    "train_features"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.07993Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.079658Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.088282Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.087172Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.079904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_labels = train_data.quality.values.reshape(-1, 1)\n",
+    "trains_labels"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.090275Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.089806Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.107085Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.105645Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.090224Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_mean = trains_labels.mean()\n",
+    "trains_std = trains_labels.std()\n",
+    "trains_labels = (trains_labels - trains_mean) / trains_std\n",
+    "train_labels = torch.tensor(trains_labels,\n",
+    "                            dtype=torch.float32)\n",
+    "train_labels"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Training"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Initialize the weight of the linear regression"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.108789Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.108457Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.116208Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.114731Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.10876Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_features = train_data.shape[1]\n",
+    "linear_weights = 0 # TODO, initialize a random tensor "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Training loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.11778Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.117448Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.446969Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.445827Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.11775Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "num_iterations = 512\n",
+    "lr = 1e-3\n",
+    "for i in range(num_iterations):\n",
+    "    # TODO"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Get the real predictions"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.449495Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.449118Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.459333Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.457917Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.449447Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "predictions = (predictions * trains_std) + trains_mean\n",
+    "predictions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Our predictions seem very close to the ground truth!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "**To go further**: Stochastic Gradient Descent is not the optimal algorithm in terms of convergeance.\n",
+    "If you are curious, you can read this nice article about an improvement to SGD, momentum and try to implement it: https://distill.pub/2017/momentum/"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.8.5"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
diff --git a/2-Linear-networks/Exercise/simple-regression.ipynb b/2-Linear-networks/Exercise/simple-regression.ipynb
new file mode 100644
index 0000000..2f064d1
--- /dev/null
+++ b/2-Linear-networks/Exercise/simple-regression.ipynb
@@ -0,0 +1,298 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "!pip install wandb"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
+    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:21.990824Z",
+     "iopub.status.busy": "2021-07-20T09:27:21.990322Z",
+     "iopub.status.idle": "2021-07-20T09:27:21.998746Z",
+     "shell.execute_reply": "2021-07-20T09:27:21.99754Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:21.990792Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
+    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
+    "# For example, here's several helpful packages to load\n",
+    "\n",
+    "import numpy as np # linear algebra\n",
+    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
+    "import wandb\n",
+    "\n",
+    "# Input data files are available in the read-only \"../input/\" directory\n",
+    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
+    "\n",
+    "import os\n",
+    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
+    "    for filename in filenames:\n",
+    "        print(os.path.join(dirname, filename))\n",
+    "\n",
+    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
+    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "First, we need to import Pytorch"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.001769Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.000817Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.016019Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.01474Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.001726Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "import torch\n",
+    "from torch import nn\n",
+    "from torch import optim\n",
+    "from torch.utils import data\n",
+    "import wandb\n",
+    "wandb.init(project=\"simple_regression\")"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Data Processing"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.019074Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.018711Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.054046Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.052743Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.01904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "train_data = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\n",
+    "train_data.head()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We need to separate features from target"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.056464Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.056075Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.078596Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.077606Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.05643Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_train = train_data.shape[0]\n",
+    "all_features = train_data.iloc[:, 1:-1]\n",
+    "all_features = all_features.apply(lambda x: (x - x.mean()) / (x.std()))\n",
+    "train_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)\n",
+    "train_features"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.07993Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.079658Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.088282Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.087172Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.079904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_labels = train_data.quality.values.reshape(-1, 1)\n",
+    "trains_labels"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.090275Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.089806Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.107085Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.105645Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.090224Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_mean = trains_labels.mean()\n",
+    "trains_std = trains_labels.std()\n",
+    "trains_labels = (trains_labels - trains_mean) / trains_std\n",
+    "train_labels = torch.tensor(trains_labels,\n",
+    "                            dtype=torch.float32)\n",
+    "train_labels"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "## Training"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Initialize the weight of the linear regression"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.108789Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.108457Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.116208Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.114731Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.10876Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_features = train_data.shape[1]\n",
+    "linear_weights = 0 # TODO, initialize a random tensor "
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Training loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.11778Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.117448Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.446969Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.445827Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.11775Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "num_iterations = 512\n",
+    "lr = 1e-3\n",
+    "for i in range(num_iterations):\n",
+    "    # TODO"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Get the real predictions"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.449495Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.449118Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.459333Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.457917Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.449447Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "predictions = (predictions * trains_std) + trains_mean\n",
+    "predictions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Our predictions seem very close to the ground truth!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "**To go further**: Stochastic Gradient Descent is not the optimal algorithm in terms of convergeance.\n",
+    "If you are curious, you can read this nice article about an improvement to SGD, momentum and try to implement it: https://distill.pub/2017/momentum/"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.8.5"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
diff --git a/2-Linear-networks/Slides/.ipynb_checkpoints/1-Linear Regression-checkpoint.ipynb b/2-Linear-networks/Slides/.ipynb_checkpoints/1-Linear Regression-checkpoint.ipynb
new file mode 100644
index 0000000..295be68
--- /dev/null
+++ b/2-Linear-networks/Slides/.ipynb_checkpoints/1-Linear Regression-checkpoint.ipynb	
@@ -0,0 +1,273 @@
+{
+ "cells": [
+  {
+   "cell_type": "markdown",
+   "id": "f0f4628b",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "source": [
+    "# Linear Regression"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "9b398477",
+   "metadata": {},
+   "source": [
+    "Modeling the relationship between one or more independent variables"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "971fc38f",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Prediction"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "b73b485c",
+   "metadata": {},
+   "source": [
+    "Regression is often used in prediction problem  \n",
+    "**Examples**: Predicting stock prices, house prices, COVID cases, demands for specific products, etc."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "6fcd160e",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Introduction"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "33f8aeb2",
+   "metadata": {},
+   "source": [
+    "**Linear** Regression assumes that the relationship between the features $\\mathbf{x}$ and the targets $y$ is linear,\n",
+    "i.e., that $y$ can be expressed as a weighted sum of the elements in $\\mathbf{x}$ plus some observation Gaussian noise"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "9720835a",
+   "metadata": {},
+   "source": [
+    "We wish to estimate the prices of houses based on their area and age.\n",
+    "We need a set of example, called a *training set*, where each row (containing the data corresponding to one sale)\n",
+    "is called an *example*  \n",
+    "\n",
+    "The thing we are trying to predict is called a *label*  \n",
+    "The variables upon which the predictions are based are called *features*  \n",
+    "\n",
+    "$n$ represent the number of examples in our dataset. \n",
+    "$\\mathbf{x}^{(i)}$ denotes the $i$-th sample and $x_j^{(i)}$ denotes its $j$-th coordinate."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "49df0e47",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Model"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "aeceff99",
+   "metadata": {},
+   "source": [
+    "$$\\mathrm{price} = w_{\\mathrm{area}} \\cdot \\mathrm{area} + w_{\\mathrm{age}} \\cdot \\mathrm{age} + b.$$\n",
+    "\n",
+    "$w_{\\mathrm{area}}$ and $w_{\\mathrm{age}}$\n",
+    "are called *weights*, and $b$ is called a *bias*\n",
+    "\n",
+    "Weights determine the influence of each feature on our prediction. The bias determines the value of the estimate when all features are zero."
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "bc74ea52",
+   "metadata": {},
+   "source": [
+    "This is called **linear** regression but it's not. **Why?**"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "712eb242",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Goal"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "cd68b33f",
+   "metadata": {},
+   "source": [
+    "We want to learn the vector of weights $w$ that provides the best predictions $\\hat{y}$ as\n",
+    "\n",
+    "$$\\hat{y} = w_1  x_1 + ... + w_d  x_d + b.$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "d375714f",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "source": [
+    "Let $\\mathbf{x} \\in \\mathbb{R}^d$ the vector containing all the features,\n",
+    "we express our model using a dot product:\n",
+    "\n",
+    "$$\\hat{y} = \\mathbf{w}^\\top \\mathbf{x} + b.$$\n"
+   ]
+  },
+  {
+   "attachments": {},
+   "cell_type": "markdown",
+   "id": "a55a002d",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "For a collection of features $\\mathbf{X}$, the predictions $\\hat{\\mathbf{y}} \\in \\mathbb{R}^n$ can be expressed via the matrix-vector product:\n",
+    "\n",
+    "$${\\hat{\\mathbf{y}}} = \\mathbf{X} \\mathbf{w} + b$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "46489d78",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## Mesuring the performance of our model"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "9aee2039",
+   "metadata": {},
+   "source": [
+    "To select the best parameters, we need to be capable to compare 2 set of weights\n",
+    "\n",
+    "The *loss* function quantifies the distance\n",
+    "between the *real* and *predicted* value of the target.\n",
+    "The loss will usually be a non-negative number\n",
+    "where smaller values are better with an optimum of 0"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "8de5290f",
+   "metadata": {},
+   "source": [
+    "**Squared error** $$l^{(i)}(\\mathbf{w}, b) = \\frac{1}{2} \\left(\\hat{y}^{(i)} - y^{(i)}\\right)^2.$$\n",
+    "\n",
+    "with $\\hat{y}^{(i)}$ our prediction and $y^{(i)}$ the ground truth"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "405af50e",
+   "metadata": {},
+   "source": [
+    "To mesure the loss on the entire dataset, we simply average the loss of each item\n",
+    "\n",
+    "$$L(\\mathbf{w}, b) =\\frac{1}{n}\\sum_{i=1}^n l^{(i)}(\\mathbf{w}, b) =\\frac{1}{n} \\sum_{i=1}^n \\frac{1}{2}\\left(\\mathbf{w}^\\top \\mathbf{x}^{(i)} + b - y^{(i)}\\right)^2.$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "c6059bb5",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "slide"
+    }
+   },
+   "source": [
+    "## How to train this?"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "a1e7b7bc",
+   "metadata": {},
+   "source": [
+    "* Random guess? **Impossible too combinatorial**\n",
+    "* Naive approach: **Orthogonal seach**, very slow\n",
+    "* Analytic solution: $$\\mathbf{w}^* = (\\mathbf X^\\top \\mathbf X)^{-1}\\mathbf X^\\top \\mathbf{y}.$$\n",
+    "Out of scope. Doesn't scale!\n",
+    "* **Gradient descent**: Compute the gradient, do a little step toward the oposite direction of the gradient\n",
+    "$$(\\mathbf{w},b) \\leftarrow (\\mathbf{w},b) - \\frac{\\eta}{|\\mathcal{B}|} \\sum_{i \\in \\mathcal{B}} \\partial_{(\\mathbf{w},b)} l^{(i)}(\\mathbf{w},b).$$"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "b29a0560",
+   "metadata": {
+    "slideshow": {
+     "slide_type": "-"
+    }
+   },
+   "source": [
+    "The maths behind *gradient descent* are out of the scope of this class  \n",
+    "Intuition behing *gradient descent*: You are on top of a montain, it's very foggy, you want to go back to the village; you take a step towards the steepest local descent  \n",
+    "At the end of the day, you might end up somewhere. Where? Are you guaranteed to find the best solution?"
+   ]
+  }
+ ],
+ "metadata": {
+  "celltoolbar": "Slideshow",
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.8.5"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 5
+}
diff --git a/2-Linear-networks/Slides/.ipynb_checkpoints/5-Softmax-regression-checkpoint.ipynb b/2-Linear-networks/Slides/.ipynb_checkpoints/5-Softmax-regression-checkpoint.ipynb
deleted file mode 100644
index 8d66b90..0000000
--- a/2-Linear-networks/Slides/.ipynb_checkpoints/5-Softmax-regression-checkpoint.ipynb
+++ /dev/null
@@ -1,52 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "7eb5efc6",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "-"
-    }
-   },
-   "source": [
-    "# Softmax regression\n",
-    "\n",
-    "From regression to classification"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "e8c37bb7",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Rather than predicting quantities "
-   ]
-  }
- ],
- "metadata": {
-  "celltoolbar": "Slideshow",
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.5"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/2-Linear-networks/Slides/1-Linear Regression.ipynb b/2-Linear-networks/Slides/1-Linear Regression.ipynb
index f2a48b5..352e483 100644
--- a/2-Linear-networks/Slides/1-Linear Regression.ipynb	
+++ b/2-Linear-networks/Slides/1-Linear Regression.ipynb	
@@ -134,7 +134,6 @@
    ]
   },
   {
-   "attachments": {},
    "cell_type": "markdown",
    "id": "d375714f",
    "metadata": {
@@ -150,11 +149,7 @@
    ]
   },
   {
-   "attachments": {
-    "download.jpeg": {
-     "image/jpeg": ""
-    }
-   },
+   "attachments": {},
    "cell_type": "markdown",
    "id": "a55a002d",
    "metadata": {
@@ -165,9 +160,7 @@
    "source": [
     "For a collection of features $\\mathbf{X}$, the predictions $\\hat{\\mathbf{y}} \\in \\mathbb{R}^n$ can be expressed via the matrix-vector product:\n",
     "\n",
-    "$${\\hat{\\mathbf{y}}} = \\mathbf{X} \\mathbf{w} + b$$\n",
-    "\n",
-    "<center><img src=\"attachment:download.jpeg\" height=\"50%\" width=\"50%\"/></center>"
+    "$${\\hat{\\mathbf{y}}} = \\mathbf{X} \\mathbf{w} + b$$"
    ]
   },
   {
@@ -179,7 +172,7 @@
     }
    },
    "source": [
-    "## Mesuring the performance of our model"
+    "## Metric to optimize"
    ]
   },
   {
@@ -191,8 +184,8 @@
     "\n",
     "The *loss* function quantifies the distance\n",
     "between the *real* and *predicted* value of the target.\n",
-    "The loss will usually be a non-negative number\n",
-    "where smaller values are better with an optimum of 0"
+    "The loss will usually be a **non-negative number**\n",
+    "where smaller values are better with an optimum of **0**"
    ]
   },
   {
@@ -250,7 +243,9 @@
    },
    "source": [
     "The maths behind *gradient descent* are out of the scope of this class  \n",
-    "Intuition behing *gradient descent*: You are on top of a montain, it's very foggy, you want to go back to the village; you take a step towards the steepest local descent  \n",
+    "\n",
+    "**Intuition behing *gradient descent*: You are on top of a montain, it's very foggy, you want to go back to the village; you take a step towards the steepest local descent**\n",
+    "\n",
     "At the end of the day, you might end up somewhere. Where? Are you guaranteed to find the best solution?"
    ]
   }
diff --git a/2-Linear-networks/Slides/3-Implementation From Scratch.ipynb b/2-Linear-networks/Slides/3-Implementation From Scratch.ipynb
index fe4a708..6cb8f03 100644
--- a/2-Linear-networks/Slides/3-Implementation From Scratch.ipynb	
+++ b/2-Linear-networks/Slides/3-Implementation From Scratch.ipynb	
@@ -1799,7 +1799,6 @@
   "rise": {
    "autolaunch": true,
    "enable_chalkboard": true,
-   "overlay": "<div class='my-top-right'><img height=80px src='http://d2l.ai/_static/logo-with-text.png'/></div><div class='my-top-left'></div>",
    "scroll": true
   }
  },
diff --git a/2-Linear-networks/Slides/4-Pytorch NN.ipynb b/2-Linear-networks/Slides/4-Pytorch NN.ipynb
deleted file mode 100644
index bfd5277..0000000
--- a/2-Linear-networks/Slides/4-Pytorch NN.ipynb	
+++ /dev/null
@@ -1,528 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "d28b98ef",
-   "metadata": {},
-   "source": [
-    "## Pytorch NN API\n",
-    "\n",
-    "Pytorch already includes everything we need to train a linear model in less than 10 lines of code!"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 97,
-   "id": "885a3bc9",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "skip"
-    }
-   },
-   "outputs": [],
-   "source": [
-    "%matplotlib inline\n",
-    "import random\n",
-    "import torch\n",
-    "from torch.utils import data\n",
-    "from d2l import torch as d2l"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 98,
-   "id": "630a6827",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "outputs": [],
-   "source": [
-    "true_w = torch.tensor([2, -3.4, 5, 6])\n",
-    "true_b = 2.4\n",
-    "features, labels = d2l.synthetic_data(true_w, true_b, 2000)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 99,
-   "id": "ee15a747",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "-"
-    }
-   },
-   "outputs": [],
-   "source": [
-    "def load_array(data_arrays, batch_size, is_train=True):  #@save\n",
-    "    \"\"\"Construct a PyTorch data iterator.\"\"\"\n",
-    "    dataset = data.TensorDataset(*data_arrays)\n",
-    "    return data.DataLoader(dataset, batch_size, shuffle=is_train)\n",
-    "\n",
-    "batch_size = 32\n",
-    "data_iter = load_array((features, labels), batch_size)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "1d5eb666",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "-"
-    }
-   },
-   "source": [
-    "We can now iterate over minibtaches"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 100,
-   "id": "cb5d27e4",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "[tensor([[-0.7750, -0.3375, -3.0775,  0.3999],\n",
-       "         [ 0.3603,  0.5259, -0.7980,  0.7253],\n",
-       "         [-0.6213,  1.9601, -0.1050, -0.4855],\n",
-       "         [ 0.7630, -0.7636,  0.5364, -0.9245],\n",
-       "         [ 0.7411,  0.2197,  1.9276,  1.4122],\n",
-       "         [ 0.0977,  0.4852,  0.0378,  0.1262],\n",
-       "         [ 1.1099, -0.0328, -0.0409,  3.2606],\n",
-       "         [ 0.0399,  0.7603, -0.1673, -1.0199],\n",
-       "         [-1.1211, -1.6171,  2.6445, -1.5734],\n",
-       "         [-0.1746, -1.4129,  0.8719, -0.4062],\n",
-       "         [ 1.0378, -0.3140, -0.1650,  0.5129],\n",
-       "         [ 1.2433, -0.6955,  0.2335, -0.5717],\n",
-       "         [-0.8743,  2.1318, -1.3332, -0.8431],\n",
-       "         [ 0.6405,  0.7645, -1.7711,  0.9211],\n",
-       "         [-0.1944, -1.2696,  0.5046, -0.6224],\n",
-       "         [ 0.9282,  1.4796,  0.0818, -0.1370],\n",
-       "         [-0.1712, -0.1425,  0.2905, -0.6542],\n",
-       "         [-0.5804, -1.6171, -0.4810,  3.0605],\n",
-       "         [ 1.5268, -1.3805,  0.3386,  1.3706],\n",
-       "         [ 1.3698,  1.4510, -1.3403, -0.4861],\n",
-       "         [ 0.4806, -0.6625,  1.5324, -0.5126],\n",
-       "         [-1.0851, -0.0158, -1.1803, -2.3786],\n",
-       "         [ 1.5731,  1.5131, -0.8933,  0.5534],\n",
-       "         [-0.5173, -0.2646, -1.2180, -0.2796],\n",
-       "         [ 1.0944, -0.5429, -0.5775,  1.0872],\n",
-       "         [ 0.2909,  0.2836, -1.7860,  0.1919],\n",
-       "         [ 0.3857, -0.9402,  0.1239,  1.1654],\n",
-       "         [ 0.2642, -1.4836, -0.8509,  0.6438],\n",
-       "         [-1.5941, -0.3998,  1.2165,  0.4891],\n",
-       "         [ 0.9408,  0.6589, -1.3848, -0.7572],\n",
-       "         [-0.0623,  0.3164,  0.0477,  2.4150],\n",
-       "         [ 1.0281, -0.0974, -0.6562,  0.2518]]),\n",
-       " tensor([[-10.9845],\n",
-       "         [  1.6911],\n",
-       "         [ -8.9376],\n",
-       "         [  3.6654],\n",
-       "         [ 21.2419],\n",
-       "         [  1.8888],\n",
-       "         [ 24.0887],\n",
-       "         [ -7.0533],\n",
-       "         [  9.4259],\n",
-       "         [  8.7706],\n",
-       "         [  7.7876],\n",
-       "         [  5.0114],\n",
-       "         [-18.3170],\n",
-       "         [ -2.2531],\n",
-       "         [  5.1184],\n",
-       "         [ -1.1873],\n",
-       "         [  0.0661],\n",
-       "         [ 22.6949],\n",
-       "         [ 20.0575],\n",
-       "         [ -9.4148],\n",
-       "         [ 10.1973],\n",
-       "         [-19.8966],\n",
-       "         [ -0.7367],\n",
-       "         [ -5.4857],\n",
-       "         [ 10.0644],\n",
-       "         [ -5.7686],\n",
-       "         [ 13.9744],\n",
-       "         [  7.6002],\n",
-       "         [  9.5804],\n",
-       "         [ -9.4159],\n",
-       "         [ 15.9255],\n",
-       "         [  3.0186]])]"
-      ]
-     },
-     "execution_count": 100,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "next(iter(data_iter))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "2b571b09",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "For standard operations, we can **use a framework's predefined layers,**\n",
-    "which allow us to focus on the layers used to construct the model\n",
-    "rather than having to focus on the implementation.\n",
-    "\n",
-    "The `Sequential` class defines a container\n",
-    "for several layers that will be chained together.\n",
-    "Given input data, a `Sequential` instance passes it through\n",
-    "the first layer, in turn passing the output\n",
-    "as the second layer's input and so forth.\n",
-    "\n",
-    "The layer is said to be *fully-connected*\n",
-    "because each of its inputs is connected to each of its outputs\n",
-    "by means of a matrix-vector multiplication."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 101,
-   "id": "48343d99",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "# `nn` is an abbreviation for neural networks\n",
-    "from torch import nn\n",
-    "\n",
-    "net = nn.Sequential(nn.Linear(4, 1))"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "46f23d59",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "We need to initialize the model parameters. By default Pytorch initialize the weight using an uniform distribution considering the size of the layer.\n",
-    "\n",
-    "You should **always** initialize your layer\n",
-    "\n",
-    "<center><img src=\"weights init.jpeg\" /></center>"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "4439d9f2",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "There is a litterature full of different weight initialization technique\n",
-    "\n",
-    "You can write yours:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 102,
-   "id": "b30bb9dc",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "tensor([[ 0.0005,  0.0237,  0.0043, -0.0013]])"
-      ]
-     },
-     "execution_count": 102,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "net[0].weight.data.normal_(0, 0.01) # net[0] is the first layer\n",
-    "net[0].bias.data.fill_(0)\n",
-    "net[0].weight.data"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "b08ca6db",
-   "metadata": {},
-   "source": [
-    "99.9999% of the time you will use one from the litterature: [See Pytorch init doc](https://pytorch.org/docs/stable/nn.init.html)\n",
-    "\n",
-    "I recommand **Xavier normal**, it usually works well.\n",
-    "If you have time/ressource you can try different init and pick the best ;)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 103,
-   "id": "605492ef",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "tensor([[1.2792, 0.0103, 0.0357, 0.3401]])"
-      ]
-     },
-     "execution_count": 103,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "def _weights_init(m):\n",
-    "    if isinstance(m, nn.Linear):\n",
-    "        torch.nn.init.xavier_normal_(m.weight)\n",
-    "        m.bias.data.zero_()\n",
-    "        \n",
-    "net.apply(_weights_init)\n",
-    "net[0].weight.data"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "ffaa0622",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Then we need to define the loss function we will use.\n",
-    "The `MSELoss` class computes the mean squared error, also known as squared $L_2$ norm.\n",
-    "By default it returns the average loss over examples."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 104,
-   "id": "6f2d84ff",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "loss = nn.MSELoss()"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "d32d40a4",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Last piece of the puzzle, we need to define the optimizer.\n",
-    "When we (**instantiate an `SGD` instance,**)\n",
-    "we will specify the parameters to optimize over\n",
-    "(obtainable from our net via `net.parameters()`), with a dictionary of hyperparameters\n",
-    "required by our optimization algorithm.\n",
-    "Minibatch stochastic gradient descent just requires that\n",
-    "we set the value `lr`, which is set to 0.03 here."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 105,
-   "id": "02ec64dd",
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "optim = torch.optim.SGD(net.parameters(), lr=3e-2)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 106,
-   "id": "4217580f",
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "Parameter containing:\n",
-       "tensor([[1.2792, 0.0103, 0.0357, 0.3401]], requires_grad=True)"
-      ]
-     },
-     "execution_count": 106,
-     "metadata": {},
-     "output_type": "execute_result"
-    }
-   ],
-   "source": [
-    "next(net.parameters())"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "ddc550c0",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Let's put everything together !\n",
-    "\n",
-    "The training loop itself is strikingly similar to what we did when implementing everything from scratch.\n",
-    "\n",
-    "For each minibatch, we go through the following ritual:\n",
-    "\n",
-    "* Generate predictions by calling `net(X)` and calculate the loss `l` (the forward propagation).\n",
-    "* Calculate gradients by running the backpropagation.\n",
-    "* Update the model parameters by invoking our optimizer.\n",
-    "\n",
-    "For good measure, we compute the loss after each epoch and print it to monitor progress."
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 107,
-   "id": "a8520988",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "epoch 1, loss 0.023009\n",
-      "epoch 2, loss 0.000104\n",
-      "epoch 3, loss 0.000098\n",
-      "epoch 4, loss 0.000098\n",
-      "epoch 5, loss 0.000099\n",
-      "epoch 6, loss 0.000098\n",
-      "epoch 7, loss 0.000098\n",
-      "epoch 8, loss 0.000098\n",
-      "epoch 9, loss 0.000098\n",
-      "epoch 10, loss 0.000098\n"
-     ]
-    }
-   ],
-   "source": [
-    "num_epochs = 10\n",
-    "for epoch in range(num_epochs):\n",
-    "    for X, y in data_iter:\n",
-    "        l = loss(net(X), y)\n",
-    "        optim.zero_grad() # please don't forget!\n",
-    "        l.backward() # remember: You need to tell wrt to what the gradient is computed\n",
-    "        optim.step() # do a step in the gradient direction\n",
-    "    with torch.no_grad():\n",
-    "        l = loss(net(features), labels) \n",
-    "        print(f'epoch {epoch + 1}, loss {l:f}')"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "1863865c",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "# ⚠️ NEVER FORGET TO ZERO_GRAD THE OPTIMIZER ⚠️"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "53a5b438",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "By default the optimizer accumulate the gradient!\n",
-    "\n",
-    "If you don't set it back to 0, it will keep previous gradient and sum them!\n",
-    "\n",
-    "If your model doesn't converge check this first!"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "c8ce8575",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Now let's compare the true parameters and the learned one:"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 108,
-   "id": "5925519f",
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "error in estimating w: tensor([ 1.4734e-04,  4.4155e-04, -3.1853e-04, -5.7220e-06])\n",
-      "error in estimating b: tensor([-0.0003])\n"
-     ]
-    }
-   ],
-   "source": [
-    "w = net[0].weight.data\n",
-    "print('error in estimating w:', true_w - w.reshape(true_w.shape))\n",
-    "b = net[0].bias.data\n",
-    "print('error in estimating b:', true_b - b)"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "034aa25d",
-   "metadata": {},
-   "source": [
-    "<center><img src=\"memeticMemoryheader.png\" height=\"30%\" width=\"30%\" /></center>"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "f03bd41c",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "skip"
-    }
-   },
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "celltoolbar": "Slideshow",
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.5"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/2-Linear-networks/Slides/5-Softmax-regression.ipynb b/2-Linear-networks/Slides/5-Softmax-regression.ipynb
deleted file mode 100644
index 820a3f8..0000000
--- a/2-Linear-networks/Slides/5-Softmax-regression.ipynb
+++ /dev/null
@@ -1,187 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "56baa38c",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "-"
-    }
-   },
-   "source": [
-    "# Softmax regression\n",
-    "\n",
-    "From regression to classification"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "5d2eb9ab",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Rather than predicting quantities, we often want to classify things.\n",
-    "\n",
-    "**Example**: Classify a mail as spam or not, is there a cat in this imag, etc.?"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "628bfad6",
-   "metadata": {},
-   "source": [
-    "Classes are represented using encoding\n",
-    "\n",
-    "This encoding ensure there are no order in the representation\n",
-    "if for **{dog, cat, bird, fish}** we were assigning $y \\in \\{1, 2, 3, 4\\}$ we would have assign an **order** and a **value** to each class. We don't want that!"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "8953e7f5",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "The usual way to represent categorical data is the *one-hot encoding*.\n",
-    "\n",
-    "It is a vector with as many components as we have categories.\n",
-    "\n",
-    "The component corresponding to particular instance's category is set to 1\n",
-    "and all other components are set to 0.\n",
-    "\n",
-    "$$y \\in \\{(1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)\\}.$$"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "5e64fa89",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "-"
-    }
-   },
-   "source": [
-    "To estimate the conditional probabilities of all the possible classes, we need a model with one output per class\n",
-    "\n",
-    "<center><img src=\"softmaxreg.svg\" height=\"70%\" width=\"70%\"/></center>"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "3f9f9b69",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "**Problem**: Our model output scalars, we want probabilities.\n",
-    "These scalars are called **logits**.\n",
-    "\n",
-    "To transform a vector of **logits** into a probability vector, we use the **SoftMax** function\n",
-    "\n",
-    "$$\\hat{\\mathbf{y}} = \\mathrm{softmax}(\\mathbf{o})\\quad \\text{where}\\quad \\hat{y}_j = \\frac{\\exp(o_j)}{\\sum_k \\exp(o_k)}. $$"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "a7e01074",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "We need a loss function capable to mesure the quality of our predicted probabilities\n",
-    "\n",
-    "We rely on the **maximum likelihood** estimation\n",
-    "\n",
-    "**Softmax** provides a vector $\\hat{\\mathbf{y}}$,\n",
-    "which we can interpret as estimated conditional probabilities\n",
-    "of each class given any input $\\mathbf{x}$, e.g.,\n",
-    "$\\hat{y}_1$ = $P(y=\\text{cat} \\mid \\mathbf{x})$."
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "d6dc1ad0",
-   "metadata": {},
-   "source": [
-    "Suppose that the entire dataset $\\{\\mathbf{X}, \\mathbf{Y}\\}$ has $n$ examples,\n",
-    "where the example indexed by $i$\n",
-    "consists of a feature vector $\\mathbf{x}^{(i)}$ and a one-hot label vector $\\mathbf{y}^{(i)}$.\n",
-    "We can compare the estimates with reality\n",
-    "by checking how probable the actual classes are\n",
-    "according to our model, given the features:\n",
-    "\n",
-    "$$\n",
-    "P(\\mathbf{Y} \\mid \\mathbf{X}) = \\prod_{i=1}^n P(\\mathbf{y}^{(i)} \\mid \\mathbf{x}^{(i)}).\n",
-    "$$\n",
-    "\n",
-    "**If $P(\\mathbf{Y} \\mid \\mathbf{X}) = 1$ we have a perfect model!** \n",
-    "\n",
-    "We want to *maximize* the maximum likelihood. However, in neural network, we want to have a loss we can *minimize*"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "d9f7edd3",
-   "metadata": {
-    "slideshow": {
-     "slide_type": "slide"
-    }
-   },
-   "source": [
-    "Minimizing the **negative log-likelihood** is equivalent to maximizing the maximum likelihood\n",
-    "\n",
-    "$$\n",
-    "-\\log P(\\mathbf{Y} \\mid \\mathbf{X}) = \\sum_{i=1}^n -\\log P(\\mathbf{y}^{(i)} \\mid \\mathbf{x}^{(i)})\n",
-    "= \\sum_{i=1}^n l(\\mathbf{y}^{(i)}, \\hat{\\mathbf{y}}^{(i)}),\n",
-    "$$\n",
-    "\n",
-    "where for any pair of label $\\mathbf{y}$ and model prediction $\\hat{\\mathbf{y}}$ over $q$ classes,\n",
-    "the loss function $l$ is\n",
-    "\n",
-    "$$ l(\\mathbf{y}, \\hat{\\mathbf{y}}) = - \\sum_{j=1}^q y_j \\log \\hat{y}_j. $$\n",
-    "\n",
-    "This loss is called the **cross-entropy loss**"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "50dac256",
-   "metadata": {},
-   "outputs": [],
-   "source": []
-  }
- ],
- "metadata": {
-  "celltoolbar": "Slideshow",
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.8.5"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
diff --git a/2-Linear-networks/Solution/.ipynb_checkpoints/simple-regression-checkpoint.ipynb b/2-Linear-networks/Solution/.ipynb_checkpoints/simple-regression-checkpoint.ipynb
new file mode 100644
index 0000000..1c9c759
--- /dev/null
+++ b/2-Linear-networks/Solution/.ipynb_checkpoints/simple-regression-checkpoint.ipynb
@@ -0,0 +1,281 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
+    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:21.990824Z",
+     "iopub.status.busy": "2021-07-20T09:27:21.990322Z",
+     "iopub.status.idle": "2021-07-20T09:27:21.998746Z",
+     "shell.execute_reply": "2021-07-20T09:27:21.99754Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:21.990792Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
+    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
+    "# For example, here's several helpful packages to load\n",
+    "\n",
+    "import numpy as np # linear algebra\n",
+    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
+    "\n",
+    "# Input data files are available in the read-only \"../input/\" directory\n",
+    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
+    "\n",
+    "import os\n",
+    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
+    "    for filename in filenames:\n",
+    "        print(os.path.join(dirname, filename))\n",
+    "\n",
+    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
+    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "First, we need to import Pytorch"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.001769Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.000817Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.016019Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.01474Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.001726Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "import torch\n",
+    "from torch import nn\n",
+    "from torch import optim\n",
+    "from torch.utils import data"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Data Processing"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.019074Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.018711Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.054046Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.052743Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.01904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "train_data = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\n",
+    "train_data.head()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We need to separate features from target"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.056464Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.056075Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.078596Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.077606Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.05643Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_train = train_data.shape[0]\n",
+    "all_features = train_data.iloc[:, 1:-1]\n",
+    "all_features = all_features.apply(lambda x: (x - x.mean()) / (x.std()))\n",
+    "train_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)\n",
+    "train_features"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.07993Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.079658Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.088282Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.087172Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.079904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_labels = train_data.quality.values.reshape(-1, 1)\n",
+    "trains_labels"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.090275Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.089806Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.107085Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.105645Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.090224Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_mean = trains_labels.mean()\n",
+    "trains_std = trains_labels.std()\n",
+    "trains_labels = (trains_labels - trains_mean) / trains_std\n",
+    "train_labels = torch.tensor(trains_labels,\n",
+    "                            dtype=torch.float32)\n",
+    "train_labels"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Initialize the weight of the linear regression"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.108789Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.108457Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.116208Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.114731Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.10876Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_features = train_data.shape[1]\n",
+    "linear_weights = torch.normal(mean=0, std=1/n_features, size=(all_features.shape[1], 1), dtype=torch.float32, requires_grad=True)\n",
+    "#linear_weights = torch.rand((all_features.shape[1], 1), dtype=torch.float32, requires_grad=True)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Training loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.11778Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.117448Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.446969Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.445827Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.11775Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "num_iterations = 512\n",
+    "lr = 1e-3\n",
+    "momentum_parameter = 0.9\n",
+    "momentum = torch.zeros(linear_weights.shape, dtype=torch.float32, requires_grad=True)\n",
+    "for i in range(num_iterations):\n",
+    "    linear_weights.requires_grad_(True)\n",
+    "    predictions = torch.matmul(train_features, linear_weights)\n",
+    "    loss = ((predictions - train_labels) ** 2).mean()\n",
+    "    loss.backward()\n",
+    "    with torch.no_grad():\n",
+    "        momentum = (momentum * momentum_parameter) + linear_weights.grad\n",
+    "        linear_weights = linear_weights - lr * momentum\n",
+    "    print(f'iteration {i + 1}, loss: {loss.item()}', end='\\r')"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Get the real predictions"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.449495Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.449118Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.459333Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.457917Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.449447Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "predictions = (predictions * trains_std) + trains_mean\n",
+    "predictions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Our predictions seem very close to the ground truth!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To go further: The update seems a bit weird isn't it? We use something called momentum to accelerate and improve training. If you are curious, you can read this nice article about momentum: https://distill.pub/2017/momentum/"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.4"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
diff --git a/2-Linear-networks/Solution/simple-regression.ipynb b/2-Linear-networks/Solution/simple-regression.ipynb
new file mode 100644
index 0000000..1c9c759
--- /dev/null
+++ b/2-Linear-networks/Solution/simple-regression.ipynb
@@ -0,0 +1,281 @@
+{
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
+    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:21.990824Z",
+     "iopub.status.busy": "2021-07-20T09:27:21.990322Z",
+     "iopub.status.idle": "2021-07-20T09:27:21.998746Z",
+     "shell.execute_reply": "2021-07-20T09:27:21.99754Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:21.990792Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
+    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
+    "# For example, here's several helpful packages to load\n",
+    "\n",
+    "import numpy as np # linear algebra\n",
+    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
+    "\n",
+    "# Input data files are available in the read-only \"../input/\" directory\n",
+    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
+    "\n",
+    "import os\n",
+    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
+    "    for filename in filenames:\n",
+    "        print(os.path.join(dirname, filename))\n",
+    "\n",
+    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
+    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "First, we need to import Pytorch"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.001769Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.000817Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.016019Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.01474Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.001726Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "import torch\n",
+    "from torch import nn\n",
+    "from torch import optim\n",
+    "from torch.utils import data"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "# Data Processing"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.019074Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.018711Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.054046Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.052743Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.01904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "train_data = pd.read_csv('/kaggle/input/red-wine-quality-cortez-et-al-2009/winequality-red.csv')\n",
+    "train_data.head()"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "We need to separate features from target"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.056464Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.056075Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.078596Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.077606Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.05643Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_train = train_data.shape[0]\n",
+    "all_features = train_data.iloc[:, 1:-1]\n",
+    "all_features = all_features.apply(lambda x: (x - x.mean()) / (x.std()))\n",
+    "train_features = torch.tensor(all_features[:n_train].values, dtype=torch.float32)\n",
+    "train_features"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.07993Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.079658Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.088282Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.087172Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.079904Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_labels = train_data.quality.values.reshape(-1, 1)\n",
+    "trains_labels"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.090275Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.089806Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.107085Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.105645Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.090224Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "trains_mean = trains_labels.mean()\n",
+    "trains_std = trains_labels.std()\n",
+    "trains_labels = (trains_labels - trains_mean) / trains_std\n",
+    "train_labels = torch.tensor(trains_labels,\n",
+    "                            dtype=torch.float32)\n",
+    "train_labels"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Initialize the weight of the linear regression"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.108789Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.108457Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.116208Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.114731Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.10876Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "n_features = train_data.shape[1]\n",
+    "linear_weights = torch.normal(mean=0, std=1/n_features, size=(all_features.shape[1], 1), dtype=torch.float32, requires_grad=True)\n",
+    "#linear_weights = torch.rand((all_features.shape[1], 1), dtype=torch.float32, requires_grad=True)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Training loop"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.11778Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.117448Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.446969Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.445827Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.11775Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "num_iterations = 512\n",
+    "lr = 1e-3\n",
+    "momentum_parameter = 0.9\n",
+    "momentum = torch.zeros(linear_weights.shape, dtype=torch.float32, requires_grad=True)\n",
+    "for i in range(num_iterations):\n",
+    "    linear_weights.requires_grad_(True)\n",
+    "    predictions = torch.matmul(train_features, linear_weights)\n",
+    "    loss = ((predictions - train_labels) ** 2).mean()\n",
+    "    loss.backward()\n",
+    "    with torch.no_grad():\n",
+    "        momentum = (momentum * momentum_parameter) + linear_weights.grad\n",
+    "        linear_weights = linear_weights - lr * momentum\n",
+    "    print(f'iteration {i + 1}, loss: {loss.item()}', end='\\r')"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Get the real predictions"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {
+    "execution": {
+     "iopub.execute_input": "2021-07-20T09:27:22.449495Z",
+     "iopub.status.busy": "2021-07-20T09:27:22.449118Z",
+     "iopub.status.idle": "2021-07-20T09:27:22.459333Z",
+     "shell.execute_reply": "2021-07-20T09:27:22.457917Z",
+     "shell.execute_reply.started": "2021-07-20T09:27:22.449447Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "predictions = (predictions * trains_std) + trains_mean\n",
+    "predictions"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "Our predictions seem very close to the ground truth!"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "metadata": {},
+   "source": [
+    "To go further: The update seems a bit weird isn't it? We use something called momentum to accelerate and improve training. If you are curious, you can read this nice article about momentum: https://distill.pub/2017/momentum/"
+   ]
+  }
+ ],
+ "metadata": {
+  "kernelspec": {
+   "display_name": "Python 3",
+   "language": "python",
+   "name": "python3"
+  },
+  "language_info": {
+   "codemirror_mode": {
+    "name": "ipython",
+    "version": 3
+   },
+   "file_extension": ".py",
+   "mimetype": "text/x-python",
+   "name": "python",
+   "nbconvert_exporter": "python",
+   "pygments_lexer": "ipython3",
+   "version": "3.6.4"
+  }
+ },
+ "nbformat": 4,
+ "nbformat_minor": 4
+}
